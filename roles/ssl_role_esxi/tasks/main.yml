---
- name: Set custom mode and reboot
  block:
  # ---step 1: preparing vcenter ---
    - name: connect and set custom mode
      esxi_cert_mgmt:
        esxi_action: "custom_mode"
        vcenter_server: "{{ vcenter_server }}"
        vcenter_user: "{{ vcenter_user }}"
        vcenter_password: "{{ vcenter_password }}"
      register: custom_mode_out

    # - name: Restart all vCenter services after setting custom mode
    #   ansible.windows.win_shell: |
    #     service-control --stop --all && service-control --start --all
    #   args:
    #     executable: cmd
    #   register: restart_services
    #   changed_when: "'Successfully started all services' in restart_services.stdout"

  rescue:
    - name: show error message
      ansible.builtin.debug:
        msg: "An error has occurred"

    - name: Set error message
      ansible.builtin.set_fact:
        assert_msg: "Failed to connect to set custom mode, {{ custom_mode_out.msg }}"

    - name: RC in case of failure
      ansible.builtin.include_role:
        name: ansible_role_returncode
      vars:
        rc_support: account
        rc_group: framework_playbook
        rc_number: 1000
        rc_message: "{{ assert_msg }}"

    - name: Set exit flag
      ansible.builtin.set_fact:
        validate_rc_error: true
      delegate_facts: true
      delegate_to: localhost

    - name: End all tasks for this host
      ansible.builtin.meta: end_host

    # Step 2, continue with the ESXi cert replacement
- name: set maintenance mode
  block:
    - name: set maintenance mode
      esxi_cert_mgmt:
        esxi_action: "maintenance"
        esxi_host: "{{ esxi_host }}"
        vcenter_server: "{{ vcenter_server }}"
        vcenter_user: "{{ vcenter_user }}"
        vcenter_password: "{{ vcenter_password }}"
      register: maintenance_out

    - name: Show powered off VMs
      ansible.builtin.debug:
        var: maintenance_out.data

    - name: Declare cleaned location variable
      ansible.builtin.set_fact:
        target_datacenter: "{{ remove_out.data.HostLocation.Datacenter | regex_replace('\\r|\\n|\\t','') | trim }}"
        target_cluster: "{{ remove_out.data.HostLocation.Cluster | default('') | regex_replace('\\r|\\n|\\t','') | trim }}"
        vms_to_power_on: "{{ maintenance_out.data.PoweredOffVMs }}"

  rescue:
    - name: show error message
      ansible.builtin.debug:
        msg: "An error has occurred"

    - name: Set error message
      ansible.builtin.set_fact:
        assert_msg: "Failed to connect set maintenance mode. {{ maintenance_out.msg }}"

    - name: RC in case of failure
      ansible.builtin.include_role:
        name: ansible_role_returncode
      vars:
        rc_support: account
        rc_group: framework_playbook
        rc_number: 2000
        rc_message: "{{ assert_msg }}"

    - name: Set exit flag
      ansible.builtin.set_fact:
        validate_rc_error: true
      delegate_facts: true
      delegate_to: localhost

    - name: End all tasks for this host
      ansible.builtin.meta: end_host

- name: set maintenance mode and remove from vCenter
  block:
    - name: Remove the ESXi host from vCenter
      esxi_cert_mgmt:
        esxi_action: "remove"
        esxi_host: "{{ esxi_host }}"
        vcenter_server: "{{ vcenter_server }}"
        vcenter_user: "{{ vcenter_user }}"
        vcenter_password: "{{ vcenter_password }}"
        vms_to_power_on: "{{ vms_to_power_on }}"
      register: remove_out

  rescue:
    - name: show error message
      ansible.builtin.debug:
        msg: "An error has occurred"

    - name: Set error message
      ansible.builtin.set_fact:
        assert_msg: "Failed to remove host from vCenter. {{ remove_out.msg }}"

    - name: RC in case of failure
      ansible.builtin.include_role:
        name: ansible_role_returncode
      vars:
        rc_support: account
        rc_group: framework_playbook
        rc_number: 3000
        rc_message: "{{ assert_msg }}"

    - name: Set exit flag
      ansible.builtin.set_fact:
        validate_rc_error: true
      delegate_facts: true
      delegate_to: localhost

    - name: End all tasks for this host
      ansible.builtin.meta: end_host

- name: connect to esx, replace machine ssl and restart
  block:
    - name: replace machine ssl and restart
      esxi_cert_mgmt:
        esxi_action: "replace_cert"
        vcenter_server: "{{ vcenter_server }}"
        vcenter_user: "{{ vcenter_user }}"
        vcenter_password: "{{ vcenter_password }}"
        esxi_cert_path: "{{ esxi_cert_path }}"
        esxi_host: "{{ esxi_host }}"
        esxi_user: "{{ esxi_user }}"
        esxi_password: "{{ esxi_password }}"
      register: replace_mssl_out

  rescue:
    - name: show error message
      ansible.builtin.debug:
        msg: "An error has occurred"

    - name: Set error message
      ansible.builtin.set_fact:
        assert_msg: "Failed to replace machine SSL certificate. {{ replace_mssl_out.msg }}"

    - name: RC in case of failure
      ansible.builtin.include_role:
        name: ansible_role_returncode
      vars:
        rc_support: account
        rc_group: framework_playbook
        rc_number: 4000
        rc_message: "{{ assert_msg }}"

    - name: Set exit flag
      ansible.builtin.set_fact:
        validate_rc_error: true
      delegate_facts: true
      delegate_to: localhost

    - name: End all tasks for this host
      ansible.builtin.meta: end_host

- name: Wait for ESXi API (HTTPS 443) to be up after reboot
  block:
    - name: Wait for ESXi API to be reachable
      ansible.builtin.wait_for:
        host: "{{ esxi_host }}"
        port: 443
        state: started
        delay: 20
        sleep: 10
        timeout: 240
      delegate_to: localhost
      become: false
      register: wait_for_out


  rescue:
    - name: show error message
      ansible.builtin.debug:
        msg: "An error has occurred"

    - name: Set error message
      ansible.builtin.set_fact:
        assert_msg: "Failed to wait for ESXi host to come online. {{ wait_for_out.msg }}"

    - name: RC in case of failure
      ansible.builtin.include_role:
        name: ansible_role_returncode
      vars:
        rc_support: account
        rc_group: framework_playbook
        rc_number: 4100
        rc_message: "{{ assert_msg }}"

    - name: Set exit flag
      ansible.builtin.set_fact:
        validate_rc_error: true
      delegate_facts: true
      delegate_to: localhost

    - name: End all tasks for this host
      ansible.builtin.meta: end_host

- name: re-add the ESXi to the vCenter
  block:
    - name: re-add the esx server
      esxi_cert_mgmt:
        esxi_action: "re-add"
        vcenter_server: "{{ vcenter_server }}"
        vcenter_user: "{{ vcenter_user }}"
        vcenter_password: "{{ vcenter_password }}"
        esxi_host: "{{ esxi_host }}"
        esxi_user: "{{ esxi_user }}"
        esxi_password: "{{ esxi_password }}"
        target_datacenter: "{{ target_datacenter }}"
        target_cluster: "{{ target_cluster }}"
        vms_to_power_on: "{{ vms_to_power_on }}"
      register: esxi_add_out

  rescue:
    - name: show error message
      ansible.builtin.debug:
        msg: "An error has occurred"

    - name: Set error message
      ansible.builtin.set_fact:
        assert_msg: "Failed to re-add the ESXi to the vCenter. {{ esxi_add_out.msg }}"

    - name: RC in case of failure
      ansible.builtin.include_role:
        name: ansible_role_returncode
      vars:
        rc_support: account
        rc_group: framework_playbook
        rc_number: 5000
        rc_message: "{{ assert_msg }}"

    - name: Set exit flag
      ansible.builtin.set_fact:
        validate_rc_error: true
      delegate_facts: true
      delegate_to: localhost

    - name: End all tasks for this host
      ansible.builtin.meta: end_host

- name: Power on VMs
  block:
    - name: Power on VMs
      esxi_cert_mgmt:
        esxi_action: "turn_on_vms"
        vcenter_server: "{{ vcenter_server }}"
        vcenter_user: "{{ vcenter_user }}"
        vcenter_password: "{{ vcenter_password }}"
        vms_to_power_on: "{{ vms_to_power_on }}"
        esxi_host: "{{ esxi_host }}"
        esxi_user: "{{ esxi_user }}"
        esxi_password: "{{ esxi_password }}"
        target_datacenter: "{{ target_datacenter }}"
        target_cluster: "{{ target_cluster }}"
      register: power_on_out

  rescue:
    - name: show error message
      ansible.builtin.debug:
        msg: "An error has occurred"

    - name: Set error message
      ansible.builtin.set_fact:
        assert_msg: "Failed to power on VMs. {{ power_on_out.msg }}"

    - name: RC in case of failure
      ansible.builtin.include_role:
        name: ansible_role_returncode
      vars:
        rc_support: account
        rc_group: framework_playbook
        rc_number: 5100
        rc_message: "{{ assert_msg }}"

    - name: Set exit flag
      ansible.builtin.set_fact:
        validate_rc_error: true
      delegate_facts: true
      delegate_to: localhost

    - name: End all tasks for this host
      ansible.builtin.meta: end_host
    

