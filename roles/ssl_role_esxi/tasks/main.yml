---
- name: Set custom mode and reboot
  block:
  # ---step 1: preparing vcenter ---
    - name: connect and set custom mode
      esxi_cert_mgmt:
        esxi_action: "custom_mode"
        vcenter_server: "{{ vcenter_server }}"
        vcenter_user: "{{ vcenter_user }}"
        vcenter_password: "{{ vcenter_password }}"
      register: custom_mode_out

    # - name: Restart all vCenter services after setting custom mode
    #   ansible.windows.win_shell: |
    #     service-control --stop --all && service-control --start --all
    #   args:
    #     executable: cmd
    #   register: restart_services
    #   changed_when: "'Successfully started all services' in restart_services.stdout"

  rescue:

    - name: Show error messsage
      ansible.builtin.debug:
        msg: "Error custom mode"

    - name: fail
      ansible.builtin.fail:
        msg: "Failed to set custom mode"

    # - name: Set error message
    #   ansible.builtin.set_fact:
    #     assert_msg: >
    #       An error  has occurred while setting up custom mode.
    #       {% if "custom mode" in ansible_failed_result.msg | d('') %}Fail to set up Custom mode{% endif %}
    #       {% if "wait for" in ansible_failed_result.task | d('') %}Timeout waiting for vCenter to come online.{% endif %}

    # - name: RC in case of failure
    #   ansible.builtin.include_role:
    #     name: ansible_role_returncode
    #   vars:
    #     rc_support: account
    #     rc_group: framework_playbook
    #     rc_number: 2200
    #     rc_message: "{{ assert_msg }}"

    # - name: Set exit flag
    #   ansible.builtin.set_fact:
    #     validate_rc_error: true
    #   delegate_facts: true
    #   delegate_to: localhost

    # - name: End all tasks for this host
    #   ansible.builtin.meta: end_host


    # Step 2, continue with the ESXi cert replacement
- name: set maintenance mode and remove from vCenter
  block:
    - name: set maintenance mode
      esxi_cert_mgmt:
        esxi_action: "maintenance"
        esxi_host: "{{ esxi_host }}"
        vcenter_server: "{{ vcenter_server }}"
        vcenter_user: "{{ vcenter_user }}"
        vcenter_password: "{{ vcenter_password }}"
      register: maintenance_out

    - name: Show powered off VMs
      ansible.builtin.debug:
        var: maintenance_out.data

    - name: Remove the ESXi host from vCenter
      esxi_cert_mgmt:
        esxi_action: "remove"
        esxi_host: "{{ esxi_host }}"
        vcenter_server: "{{ vcenter_server }}"
        vcenter_user: "{{ vcenter_user }}"
        vcenter_password: "{{ vcenter_password }}"
      register: remove_out


    - name: Declare cleaned location variable
      ansible.builtin.set_fact:
        target_datacenter: "{{ remove_out.data.HostLocation.Datacenter | regex_replace('\\r|\\n|\\t','') | trim }}"
        target_cluster: "{{ remove_out.data.HostLocation.Cluster | default('') | regex_replace('\\r|\\n|\\t','') | trim }}"


  rescue:
    - name: Show error messsage
      ansible.builtin.debug:
        msg: "Error maintenance mode"

    - name: fail
      ansible.builtin.fail:
        msg: "Failed to set maintenance mode"

    # - name: Set error message
    #   ansible.builtin.set_fact:
    #     assert_msg: >
    #       An error has occurred.
    #       {% if "maintenance" in ansible_failed_result.msg | d('') %}Failed to set up maintenance mode{% endif %}
    #       {% if "remove" in ansible_failed_result.msg | d('') %}Failed to remove ESXi host from vCenter{% endif %}

    # - name: RC in case of failure
    #   ansible.builtin.include_role:
    #     name: ansible_role_returncode
    #   vars:
    #     rc_support: account
    #     rc_group: framework_playbook
    #     rc_number: 2200
    #     rc_message: "{{ assert_msg }}"

    # - name: Set exit flag
    #   ansible.builtin.set_fact:
    #     validate_rc_error: true
    #   delegate_facts: true
    #   delegate_to: localhost

    # - name: End all tasks for this host
    #   ansible.builtin.meta: end_host

- name: "DEBUG: Verificar credenciales de ESXi ANTES de reemplazar el certificado"
  ansible.builtin.debug:
    msg:
      - "Host a conectar: '{{ esxi_host }}'"
      - "Usuario a usar: '{{ esxi_user }}'"
      - "Contraseña a usar: '{{ esxi_password }}' (Verifica si está vacía. Si usas Vault, debería aparecer como 'VAULT encrypted')"   


- name: connect to esx, replace machine ssl and restart
  block:
    - name: replace machine ssl and restart
      esxi_cert_mgmt:
        esxi_action: "replace_cert"
        vcenter_server: "{{ vcenter_server }}"
        vcenter_user: "{{ vcenter_user }}"
        vcenter_password: "{{ vcenter_password }}"
        esxi_cert_path: "{{ esxi_cert_path }}"
        esxi_host: "{{ esxi_host }}"
        esxi_user: "{{ esxi_user }}"
        esxi_password: "{{ esxi_password }}"
      register: replace_mssl_out

  rescue:

    - name: Show error messsage
      ansible.builtin.debug:
        msg: "Error while replacing certificate"

    - name: fail
      ansible.builtin.fail:
        msg: "Failed to replace certificate"

    # - name: Set error message
    #   ansible.builtin.set_fact:
    #     assert_msg: >
    #       An error has occurred.
    #       {% if "connect" in ansible_failed_result.msg | d('') %}Failed to connect to ESXi host{% endif %}
    #       {% if "replace" in ansible_failed_result.msg | d('') %}Failed to change Machine SSL certificate.{% endif %}

    # - name: RC in case of failure
    #   ansible.builtin.include_role:
    #     name: ansible_role_returncode
    #   vars:
    #     rc_support: account
    #     rc_group: framework_playbook
    #     rc_number: 2200
    #     rc_message: "{{ assert_msg }}"

    # - name: Set exit flag
    #   ansible.builtin.set_fact:
    #     validate_rc_error: true
    #   delegate_facts: true
    #   delegate_to: localhost

    # - name: End all tasks for this host
    #   ansible.builtin.meta: end_host

  # --- Step 3, re-add ESXi server to the vcenter

- name: Wait for the ESXi host to complete reboot and become available
  block:
    - name: Wait for ESXi host to come online
      ansible.builtin.wait_for_connection:
        delay: 30       # Segundos a esperar antes de empezar a verificar
        sleep: 10       # Segundos a esperar entre cada intento
        timeout: 300    # Tiempo máximo de espera en segundos (10 minutos)
      delegate_to: localhost

  rescue:
    - name: Show error messsage
      ansible.builtin.debug:
        msg: "Error waiting for ESXi host to come online"

    - name: fail
      ansible.builtin.fail:
        msg: "Failed to wait for ESXi host to come online"

    # - name: Set error message
    #   ansible.builtin.set_fact:
    #     assert_msg: >
    #       An error has occurred.
    #       {% if "wait for" in ansible_failed_result.msg | d('') %}Timeout waiting for ESXi host to come online.{% endif %}

    # - name: RC in case of failure
    #   ansible.builtin.include_role:
    #     name: ansible_role_returncode
    #   vars:
    #     rc_support: account
    #     rc_group: framework_playbook
    #     rc_number: 2200
    #     rc_message: "{{ assert_msg }}"

    # - name: Set exit flag
    #   ansible.builtin.set_fact:
    #     validate_rc_error: true
    #   delegate_facts: true
    #   delegate_to: localhost

    # - name: End all tasks for this host
    #   ansible.builtin.meta: end_host

- name: re-add the ESXi to the vCenter
  block:
    - name: re-add the esx server
      esxi_cert_mgmt:
        esxi_action: "re-add"
        vcenter_server: "{{ vcenter_server }}"
        vcenter_user: "{{ vcenter_user }}"
        vcenter_password: "{{ vcenter_password }}"
        esxi_host: "{{ esxi_host }}"
        esxi_user: "{{ esxi_user }}"
        esxi_password: "{{ esxi_password }}"
        target_datacenter: "{{ target_datacenter }}"
        target_cluster: "{{ target_cluster }}"
      register: esxi_add_out

  rescue:

    - name: Show error messsage
      ansible.builtin.debug:
        msg: "Error re-adding esx"

    - name: fail
      ansible.builtin.fail:
        msg: "Failed to add esx server"

    # - name: Set error message
    #   ansible.builtin.set_fact:
    #     assert_msg: >
    #       An error has occurred.
    #       {% if "re-add" in ansible_failed_result.msg | d('') %}Failed to re-add the ESXi to the vCenter{% endif %}

    # - name: RC in case of failure
    #   ansible.builtin.include_role:
    #     name: ansible_role_returncode
    #   vars:
    #     rc_support: account
    #     rc_group: framework_playbook
    #     rc_number: 2200
    #     rc_message: "{{ assert_msg }}"

    # - name: Set exit flag
    #   ansible.builtin.set_fact:
    #     validate_rc_error: true
    #   delegate_facts: true
    #   delegate_to: localhost

    # - name: End all tasks for this host
    #   ansible.builtin.meta: end_host
